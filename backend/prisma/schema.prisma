generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int             @id @default(autoincrement())
  email               String          @unique
  name                String
  password            String
  role                String
  status              String          @default("ACTIVE")
  createdAt           DateTime        @default(now())
  lastLogin           DateTime?
  firstTimeLogin      Boolean         @default(true)
  accountLocked       Boolean         @default(false)
  lockedUntil         DateTime?
  lockReason          String?
  passwordAttempts    Int             @default(0)
  lastPasswordAttempt DateTime?
  resetToken          String?
  resetTokenExpiry    DateTime?
  gender              String?
  age                 Int?
  residence           String?
  phone               String?
  photo               String?
  cv                  String?
  assignedStream      String?
  assignedStreams     String?
  assignedClasses     String?
  studentId           String?
  address             String?
  occupation          String?
  studentIds          String?
  messages            Message[]
  notifications       Notification[]
  teachers            Teacher?
  privileges          UserPrivilege[]
}

model UserPrivilege {
  id         Int       @id @default(autoincrement())
  userId     Int
  privilege  String
  assignedAt DateTime  @default(now())
  expiresAt  DateTime?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Student {
  id                     Int      @id @default(autoincrement())
  name                   String
  accessNumber           String   @unique
  admissionId            String?  @unique
  nin                    String?
  lin                    String?
  age                    Int
  dateOfBirth            String?
  gender                 String?
  residenceType          String?  // 'Day' | 'Boarding'
  phone                  String?
  email                  String?
  class                  String
  stream                 String
  needsSponsorship       Boolean  @default(false)
  sponsorshipStatus      String   @default("none")
  sponsorshipStory       String?
  photo                  String?
  familyPhoto            String?
  passportPhoto          String?
  status                 String   @default("active")
  flagReason             String?
  flagComment            String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  classCompletion        String?
  careerAspiration       String?
  storyLocked            Boolean  @default(false)
  parentName             String?
  parentPhone            String?
  parentEmail            String?
  parentAddress          String?
  parentOccupation       String?
  parentStory            String?
  parentAge              Int?
  parentFamilySize       Int?
  parentRelationship     String?
  conductNotes           Json?
  parentNin              String?
  parentNinType          String?  @default("NIN")
  parentPhoneCountryCode String?  @default("UG")
  phoneCountryCode       String?  @default("UG")
  feeBalance             Float?   @default(0.0)
  feesPaid               Float?   @default(0.0)
  totalFees              Float?   @default(0.0)
  address                String?
  hobbies                String?
  dreams                 String?
  aspirations            String?
  medicalCondition       String?
  village                String?
  medicalProblems        String?
  individualFee          Float?
  secondParentName       String?
  secondParentNin        String?
  secondParentPhone      String?
  secondParentEmail      String?
  secondParentAddress    String?
  secondParentOccupation String?
  secondParentPhoneCountryCode String? @default("UG")
  admittedBy             String?  @default("admin")
}

model Teacher {
  id            Int      @id @default(autoincrement())
  userId        Int      @unique
  teacherId     String   @unique
  subject       String
  qualification String?
  experience    Int?
  hireDate      DateTime @default(now())
  classes       Class[]
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Staff {
  id                       Int      @id @default(autoincrement())
  name                     String
  phone                    String?
  email                    String?
  role                     String?  // e.g., HR-defined staff role
  dateOfBirth              String?
  village                  String?
  nextOfKin                String?
  nextOfKinPhone           String?
  nationalId               String?
  medicalIssues            String?
  contractDurationMonths   Int?
  amountToPay              Float?   @default(0)
  hrNotes                  String?
  bankAccountName          String?
  bankAccountNumber        String?
  bankName                 String?
  bankBranch               String?
  mobileMoneyNumber        String?
  mobileMoneyProvider      String?
  cvFileName               String?
  cvFilePath               String?
  passportPhotoFileName    String?
  passportPhotoFilePath    String?
  attachments              String?
  notes                    String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

model StaffRole {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Class {
  id        Int      @id @default(autoincrement())
  name      String
  subject   String
  teacherId Int
  stream    String?
  grade     String?
  schedule  String?
  room      String?
  capacity  Int?
  createdAt DateTime @default(now())
  teacher   Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
}

model Attendance {
  id               Int      @id @default(autoincrement())
  studentId        String
  date             DateTime
  time             String
  status           String
  teacherId        String
  teacherName      String
  remarks          String?
  notificationSent Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Payment {
  id          Int       @id @default(autoincrement())
  studentId   String
  amount      Float
  type        String
  status      String    @default("PENDING")
  dueDate     DateTime
  paidDate    DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int?
  title      String
  content    String
  type       String   @default("GENERAL")
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Sponsorship {
  id             Int       @id @default(autoincrement())
  studentId      Int
  sponsorId      String?
  sponsorName    String
  sponsorCountry String?
  amount         Float
  type           String
  status         String    @default("PENDING")
  startDate      DateTime
  endDate        DateTime?
  description    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Resource {
  id         Int      @id @default(autoincrement())
  title      String
  fileType   String
  fileData   String
  classIds   String?
  uploadedBy String
  uploadedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Notification {
  id      Int      @id @default(autoincrement())
  userId  Int
  title   String
  message String
  type    String   @default("INFO")
  read    Boolean  @default(false)
  date    DateTime @default(now())
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Settings {
  id                        Int      @id @default(autoincrement())
  currentYear               String?
  currentTerm               String?
  securitySettings          String?
  
  // School Information
  schoolName                String?
  schoolAddress             String?
  schoolPhone               String?
  schoolEmail               String?
  schoolMotto               String?
  schoolWebsite             String?
  schoolPOBox               String?
  schoolDistrict            String?
  schoolRegion              String?
  schoolCountry             String?  @default("Uganda")
  schoolFounded             String?
  schoolRegistrationNumber  String?
  schoolLicenseNumber       String?
  schoolTaxNumber           String?
  
  // Term Dates
  termStart                 String?
  termEnd                   String?
  reportingDate             String?
  nextTermBegins            String?
  
  // Attendance Configuration
  attendanceStart           String?
  attendanceEnd             String?
  publicHolidays            String?
  
  // Styling and Branding
  schoolNameSize            Int?     @default(18)
  schoolNameColor           String?  @default("#0f172a")
  mottoSize                 Int?     @default(12)
  mottoColor                String?  @default("#475569")
  schoolBadge               String?
  
  // Document Styling
  docPrimaryColor           String?
  docFontFamily             String?
  docFontSize               Int?
  
  // HR/Document
  hrName                    String?
  hrSignatureImage          String?
  
  // Bank Details and Rules
  bankDetailsHtml           String?
  rulesRegulationsHtml      String?
  
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model BillingType {
  id          Int      @id @default(autoincrement())
  name        String
  amount      Float
  frequency   String
  description String?
  classId     String?
  className   String?
  year        String?  @default("2025")
  term        String?  @default("Term 1")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WeeklyReport {
  id            Int      @id @default(autoincrement())
  userId        String
  userName      String
  userRole      String
  weekStart     DateTime
  weekEnd       DateTime
  reportType    String   @default("user")
  content       String
  achievements  String?
  challenges    String?
  nextWeekGoals String?
  attachments   String?  // JSON string of attachment data
  status        String   @default("submitted")
  submittedAt   DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ClinicRecord {
  id               Int       @id @default(autoincrement())
  studentId        String
  accessNumber     String
  studentName      String
  className        String
  streamName       String
  visitDate        DateTime
  visitTime        String
  symptoms         String?
  diagnosis        String?
  treatment        String?
  medication       String?
  cost             Float     @default(0)
  nurseId          String
  nurseName        String
  followUpRequired Boolean   @default(false)
  followUpDate     DateTime?
  parentNotified   Boolean   @default(false)
  status           String    @default("resolved")
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model TimeTable {
  id          Int      @id @default(autoincrement())
  day         String
  startTime   String
  endTime     String
  subject     String
  teacherId   String
  teacherName String
  classId     String
  streamId    String
  className   String
  streamName  String
  room        String?
  duration    Int      @default(60)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DroppedAccessNumber {
  id           Int      @id @default(autoincrement())
  accessNumber String   @unique
  admissionId  String?
  studentName  String?
  className    String?
  streamName   String?
  reason       String   @default("deleted")
  droppedAt    DateTime @default(now())
  createdAt    DateTime @default(now())
}

model AcademicRecord {
  id           Int      @id @default(autoincrement())
  studentId    String
  studentName  String
  className    String
  streamName   String
  term         String
  year         String
  subjects     String
  totalMarks   Int
  percentage   Int
  overallGrade String
  position     Int
  teacherId    String
  teacherName  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([studentId, term, year])
}

model FinancialRecord {
  id            Int       @id @default(autoincrement())
  studentId     String
  type          String
  billingType   String
  billingAmount Float
  amount        Float
  description   String
  date          DateTime
  paymentDate   DateTime?
  paymentTime   String?
  paymentMethod String?
  status        String
  receiptNumber String?
  balance       Float     @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([studentId])
  @@index([status])
  @@index([date])
}

model StudentPhoto {
  id         Int      @id @default(autoincrement())
  studentId  String
  photoType  String
  fileName   String
  filePath   String
  fileSize   Int
  mimeType   String
  uploadedBy String
  uploadedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([studentId])
  @@index([photoType])
}

// Generalized photo asset store to normalize images across the app
model PhotoAsset {
  id           Int      @id @default(autoincrement())
  ownerType    String   // 'student' | 'user' | 'staff' | 'system'
  ownerId      String   // references id in owner table (kept flexible)
  category     String   // 'student-profile' | 'family' | 'passport' | 'user-profile' | etc.
  fileName     String
  filePath     String
  fileSize     Int
  mimeType     String
  width        Int?
  height       Int?
  checksum     String?  @unique
  isOrphaned   Boolean  @default(false)
  uploadedBy   String
  uploadedAt   DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([ownerType, ownerId])
  @@index([category])
  @@index([isOrphaned])
}

// Optional mapping tables for convenience queries
model UserPhoto {
  id         Int      @id @default(autoincrement())
  userId     Int
  assetId    Int      @unique
  type       String   // 'profile'
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
}

model PhotoCleanupLog {
  id          Int      @id @default(autoincrement())
  action      String   // 'mark-orphaned' | 'delete-orphaned' | 'move-temp'
  details     String?
  affectedIds String?  // JSON string of affected asset ids
  count       Int      @default(0)
  createdAt   DateTime @default(now())
}

model ConductNote {
  id          Int      @id @default(autoincrement())
  studentId   String
  studentName String
  className   String
  streamName  String
  noteType    String
  title       String
  description String
  severity    String
  teacherId   String
  teacherName String
  date        DateTime @default(now())
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([studentId])
  @@index([noteType])
  @@index([date])
}

model ResourceFile {
  id            Int      @id @default(autoincrement())
  title         String
  description   String?
  fileName      String
  filePath      String
  fileSize      Int
  mimeType      String
  fileType      String
  category      String
  classIds      String?
  uploadedBy    String
  uploadedAt    DateTime @default(now())
  isPublic      Boolean  @default(false)
  downloadCount Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([fileType])
  @@index([category])
  @@index([uploadedBy])
}

model StudentDocument {
  id           Int       @id @default(autoincrement())
  studentId    String
  studentName  String
  documentType String
  fileName     String
  filePath     String
  fileSize     Int
  mimeType     String
  uploadedBy   String
  uploadedAt   DateTime  @default(now())
  isVerified   Boolean   @default(false)
  verifiedBy   String?
  verifiedAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([studentId])
  @@index([documentType])
}

model TeacherResource {
  id            Int      @id @default(autoincrement())
  teacherId     String
  teacherName   String
  resourceType  String
  subject       String
  className     String?
  title         String
  description   String?
  fileName      String
  filePath      String
  fileSize      Int
  mimeType      String
  uploadedAt    DateTime @default(now())
  isShared      Boolean  @default(false)
  downloadCount Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([teacherId])
  @@index([resourceType])
  @@index([subject])
}

model InteractionAnalytics {
  id         Int      @id @default(autoincrement())
  userId     String
  userName   String
  userRole   String
  action     String
  component  String
  targetId   String?
  targetName String?
  timestamp  DateTime @default(now())
  metadata   String?
  sessionId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
  @@index([action])
  @@index([component])
  @@index([timestamp])
  @@index([sessionId])
}

model FeeStructure {
  id          Int      @id @default(autoincrement())
  className   String   // e.g., "Senior 1", "Senior 2", etc.
  feeName     String   // e.g., "Tuition", "Uniform", "Library Fee", etc.
  amount      Float    // Fee amount in UGX
  frequency   String   // e.g., "termly", "yearly", "one-time", "monthly"
  term        String?  // e.g., "Term 1", "Term 2", "Term 3"
  year        String?  // e.g., "2025"
  description String?  // Optional description
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([className])
  @@index([feeName])
  @@index([term, year])
}
